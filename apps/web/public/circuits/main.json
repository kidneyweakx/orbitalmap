{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":9524692048888750687,"abi":{"parameters":[{"name":"choice","type":{"kind":"field"},"visibility":"private"},{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+Vb7VbaQBCdmKB8KVqIWCqgyANk+ZDQP9VHKSU8Zp+t3ePOYV0CFvYODcc5x7OQhMvdmbtzExIDeovh37/v5nVkxoA2g7e9mDHxC2VjjZPnySSbjTI1Vj+T0XyRTpPJdPGcqlRN0+lylI7HWTpJZ/PFfJbM1WScqdV0Pl4ZMJtvKElYg585uL7kQyDHCMhLKodRDq4v1wjHMTnmIgiAvG2+JUnCJQHc84ILV+OdWwkG4YpwjYS4npo7ZKu3sPleSBLW4Ch3YPIXQI5lKr47lAnnDpzDMmEXQWDVmQQXAdIdcugeiq3cDXYuKmasckJCM+odv51tVYsER+hHboNscLiQEkf0qkK4BVSl/9OZfXlXdvDeF9vmW5MkrMHdzuxLvoYroKqTbGdG5LBOH3e4fb+nTrKnUohFWv8H7XwULi6y3pfAHNrNWeO+0vp67RiOd0an53hXZmxwQjiBeofreA2Sdzw7ib6Od0U4oTboNB3vimQc71qSsAZHO941roDqhorteDqHN4R3vBsqtuM1zLzRjoes9xeScTyNe2zHQ14G5NA9GDt13tu5aJqxxQnhBDbNaG/TB/1wSKEdr3q4uJJfjuM1CSfUFmEd71iiRDp1Dl0RUcZmvCVHgDFtilIfJC3KBuFEGRNOlLd0HFH6OogTPosceSo6cjfkTB2Gbee1bcY7ovdibtOmwPVBrw6pyI+cG2IF2Q8rXbnXLG0grzshoaBvIiPn/BWoEdYqYq78c7526JjwDbsJxEI27A5h3RhdD62XjkA9kDrsAOvxraD1sB+G0Le80AaMvH14L5zDxC+UrvE9rQPF9UTvoWc2364k4S7B76FnXSDHHuEWgVQOewRv8lmPir1guemFoHnnPVnmi4VsoH2wZtD10HrpE97cHgquQ/3g1QOtA8X1RI1jafN9lCSswcHGsXwEchxQ8Y1jQHDjWA5IdsH65pIbFfpsuQ/k+ETFbnq6xk8CtRkWfN662Q9pHZ+xRkhtam5sdKGV120/MXPwvoozxtbnkf9mwfgtGfzkgjYjtl63nHnauXkBcWA8rkOJtue95BxbdvgFeH7K5RLmfBfHuxuWJuItXKsWDrCmI8avyeDnaqZqva45+7h2Uc7ngi3vz5xx17G7TlQvc/YxJtfK5svz+AN6YVmDtDYAAA==","debug_symbols":"ldbLioMwFMbxd8m6i1zOOVFfZRiK1yKIipeBQfruY0tTSsgsvp0x/rLwT0IO1bTVfrv2Yzetqvg61DDV5dZP4zk6lH6+WudyfIzWrVw2VTiTXVQ7NueTze8X1fVDqwqx9++LMiiwKHBJ4F0APgaEAkaBoMAnQS4vQNpHIENBjgKTTE1MQZyfRcLAwsLCwYJgwbAQWHhYZLBINicJW4m8xHtPw8LAwsLCwYJgwbAQWHhY/NPcvUW8a22OCqdhYWBhYeFgQbBgWAgsPCzg5g5uTnBzgpsT3Jzg5gQ3p3TzPJyirDkWAgsPiwwWyebMOgiOzxLWsEg25/c1hjOKhYWFgwXBItlcXPi7QjoWAotkc/EmiOhsPwfV0g9Df7t+3q/P1z/l0pfV0L6G3T7WH7Pb7xxmgp+XqW6bfWkfKz3nzuX/AA==","file_map":{"62":{"source":"mod proof_of_visit;\nmod reputation_proofs;\nmod ownership_proofs;\nmod trustless_commitments;\n\n// Main function that dispatches to the different proof types\nfn main(choice: Field, x: Field, y: Field) {\n    // This is a simple dispatcher function\n    // The choice parameter determines which proof type to execute\n    if choice == 1 {\n        // Proof of Visit\n        assert(x != 0);\n    } else if choice == 2 {\n        // Reputation Proof\n        assert((x as i64) >= (y as i64));\n    } else if choice == 3 {\n        // Ownership Proof\n        assert(x != 0);\n    } else if choice == 4 {\n        // Trustless Commitment\n        assert(x != 0);\n    } else {\n        assert(false); // Invalid choice\n    }\n}\n\n#[test]\nfn test_main() {\n    // These are just basic tests to ensure the main dispatcher works\n    // The actual functionality is tested in the respective modules\n    \n    // Test Proof of Visit dispatcher\n    main(1, 42, 0);\n    \n    // Test Reputation Proof dispatcher\n    main(2, 100, 80);\n    \n    // Test Ownership Proof dispatcher\n    main(3, 42, 0);\n    \n    // Test Trustless Commitment dispatcher\n    main(4, 42, 0);\n    \n    // Uncomment to test failure cases:\n    // Invalid choice\n    // main(5, 42, 0);\n    \n    // Reputation threshold not met\n    // main(2, 70, 80);\n}\n","path":"/Users/kidney/Workspace/Hackathon/25trifecta/orbitalmap/apps/zk_noir/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}