{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":14075819087148257221,"abi":{"parameters":[{"name":"choice","type":{"kind":"field"},"visibility":"private"},{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+Vb21LiQBDtmKDcFF2Iuq73+2PCRcPT6qesED5zv223y3QxDgEX5jQ7lF1lDSThcKb7TJ/EhIDe4/Hv30vxOirGgGZDtsmxiVukJlYveer38+dunvbSX0l3+JYNkv7g7SlLs3SQDcbdrNfLs372PHwbPifDtN/L08lg2JsUYCbfUJMwg29ZuK7kQyDHCMhLK4dRCa4r1wjHMVnnIgiAvE2+FU3CFQXcbc+Fy3jbRoJBuCpcIyWum+YO+eQ9TL47moQZHOUOQn4HyLFK/rtDlXDuIDmsEnYRBEadSXERIN2hhO6q2Km9wcxFrRjrkpCwGHnHb2tb3SAhEbqRmyEbrC6kxBJ9WiPcAqrT/+nMrrxrC3gvi23ybWgSZnC7M7uSb+AKmDZJtzMjctikzzvcst/TJN1TKcQibf6Ddj4LGxdZ711gDs3mzLivNL1eW4fjbdHmOd5eMbYkIZJA3mE7Xov0Hc9Moqvj7RFOqC3aTMfbIx3H29ckzOBox9vHFTA9IL8dj3N4QHjHOyC/Ha9VzBvteMh6fyMdx2PcdTse8jKghO7K2Jn13sxFuxg7khBJYLsYzW180E+LFNrx6quLKxlZjtcmnFA7hHW8dYkS6dQldFVEGRfjIVkCjGlWlHyQtihbhBNlTDhRHtJ6ROnqIFa4LHLkqWjX3lAydRi2mdejYjwm+ijmI5oVOB/0apGK3MjZoVaQ5bCyiX3NcgTkdawkFPRNZOScvwM1IlpFzFX+nc8OHRO+YbeBWMiGfUJYN0bXg/VyolAPpA5PgPX44Wk9zIch+JYX2oCRtw9PlXOYuEXKNT6laaC4bug99Nzke6ZJ+Izg99DzMyDHc8ItAq0cnhO8yefn5PeClaYXguZd9mSZKxaygV6ANYOuB+vlgvDmdum5DvnBq0uaBorrhhrH2OR7pUmYwcHGMb4Ccrwm/43jmuDGMb4m3QXrmktpVOiz5Qsgxxvyu+lxjW8UanPr+by52d/SNFBcN7TZj0y+d5qEGRzc7Ed3QI735H+zvyd4sx/dk9/NXhoVutnfADk+kN9Nj2v8oFCbR8/nzc3+kabxFWuE1CZzE6MLjbzOu58oIftq1hgbn0f+pk7wOzr4yQ7NRmy87ljzNHPzAuIgeFKHCs3Pe8U6tmrxC/D8UptLWPJdEh+eTikinsO1buAAa9oV/IYOfqlm6sbrhrVPaheVfC6Y837LGhcdu+hEdbdkn2BKrUy+Mo8/2GvSlqE8AAA=","debug_symbols":"ldfNioMwFIbhe8m6i/ycc5L0Voah2FaLICr+DAzSex9bmtIJ2Xw7Y3hEfI3ETV3r83o7tX0zzOr4taluuFRLO/T7aFP6eWoeq/4xmpdqWtTRER1U3V/3I+b7QTVtV6uj0P37oAwKLApcEcT4AqRzQChgFAgKfAmQtQk4l4GAgogCU0xNQScRQi4MLCwsHCwIFgwLgYWHRYBFuXlMS4m1zdeehoWBhYWFgwXBgmEhsPCwKDf38S3yVWsjKpyGhYGFhYWDBcGCYSGw8LCAmzu4OcHNCW5OcHOCmxPcnIrN2aavKDuTC4GFh0WARbE5e0ki5N8S1rAoNuf3NkaMzoWFhYMFwaLYXCQ9XRHJhcCi2FyCSyJSLgIsIipEw6LY3HN6S7zkb4lYWBSb+5juysf/O5l9cJ7armtvp89/kf30TzW11bmrX8Nm7S8fs8vvmGaSH6fhUl/XqX5c6Tm3X/4P","file_map":{"64":{"source":"mod proof_of_visit;\nmod reputation_proofs;\nmod ownership_proofs;\nmod trustless_commitments;\nmod local_explorer_badge;\n\n// Main function that dispatches to the different proof types\nfn main(choice: Field, x: Field, y: Field) {\n    // This is a simple dispatcher function\n    // The choice parameter determines which proof type to execute\n    if choice == 1 {\n        // Proof of Visit\n        assert(x != 0);\n    } else if choice == 2 {\n        // Reputation Proof\n        assert((x as i64) >= (y as i64));\n    } else if choice == 3 {\n        // Ownership Proof\n        assert(x != 0);\n    } else if choice == 4 {\n        // Trustless Commitment\n        assert(x != 0);\n    } else if choice == 5 {\n        // Local Explorer Badge (JWT-based)\n        assert(x != 0);\n    } else {\n        assert(false); // Invalid choice\n    }\n}\n\n#[test]\nfn test_main() {\n    // These are just basic tests to ensure the main dispatcher works\n    // The actual functionality is tested in the respective modules\n    \n    // Test Proof of Visit dispatcher\n    main(1, 42, 0);\n    \n    // Test Reputation Proof dispatcher\n    main(2, 100, 80);\n    \n    // Test Ownership Proof dispatcher\n    main(3, 42, 0);\n    \n    // Test Trustless Commitment dispatcher\n    main(4, 42, 0);\n    \n    // Test Local Explorer Badge dispatcher\n    main(5, 42, 0);\n    \n    // Uncomment to test failure cases:\n    // Invalid choice\n    // main(6, 42, 0);\n    \n    // Reputation threshold not met\n    // main(2, 70, 80);\n}\n","path":"/Users/kidney/Workspace/Hackathon/25trifecta/orbitalmap/apps/zk_noir/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}